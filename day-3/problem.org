* Day 3: Spiral Memory

** Part One

   You come across an experimental new kind of memory stored on an infinite
   two-dimensional grid.

   Each square on the grid is allocated in a spiral pattern starting at a
   location marked 1 and then counting up while spiraling outward. For example,
   the first few squares are allocated like this:

   17  16  15  14  13
   18   5   4   3  12
   19   6   1   2  11
   20   7   8   9  10
   21  22  23---> ...

   While this is very space-efficient (no squares are skipped), requested data
   must be carried back to square 1 (the location of the only access port for
   this memory system) by programs that can only move up, down, left, or
   right. They always take the shortest path: the Manhattan Distance between
   the location of the data and square 1.

   For example:

   - Data from square 1 is carried 0 steps, since it's at the access port.

   - Data from square 12 is carried 3 steps, such as: down, left, left.

   - Data from square 23 is carried only 2 steps: up twice.

   - Data from square 1024 must be carried 31 steps.

   - How many steps are required to carry the data from the square identified
     in your puzzle input all the way to the access port?

   Your puzzle input is 347991.

* Scratch Area

  | square | col offset | row offset |
  |      1 |          0 |          0 |
  |      2 |          1 |          0 |
  |      3 |          1 |         -1 |
  |      4 |          0 |         -1 |
  |      5 |         -1 |         -1 |
  |      6 |         -1 |          0 |
  |      7 |         -1 |          1 |
  |      8 |          0 |          1 |
  |      9 |          1 |          1 |
  |     10 |          2 |          1 |
  |     11 |          2 |          0 |
  |     12 |          2 |         -1 |
  |     13 |          2 |         -2 |
  |     14 |          1 |         -2 |
  |     15 |          0 |         -2 |
  |     16 |         -1 |         -2 |
  |     17 |         -2 |         -2 |
  |     18 |         -2 |         -1 |
  |     19 |         -2 |          0 |
  |     20 |         -2 |          1 |
  |     21 |         -2 |          2 |
  |     22 |         -1 |          2 |
  |     23 |          0 |          2 |
  |     24 |          1 |          2 |
  |     25 |          2 |          2 |
  |     26 |          3 |          2 |

              1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
  col_offset:   i   d d     i i  i           d  d  d  d              i  i  i  i  i
  row_offset:     d     i i         d  d  d              i  i  i  i
